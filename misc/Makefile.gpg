# Makefile.gpg
#
# Encapsulation and isolation of the process of generating a GPG signing
# key, publishing it, and signing packages with it. This neither creates
# nor touches ~/.gnupg/.
#

USER_ID = 'XtraDeb Team <team@xtradeb.net>'
KEY_PREFIX = xtradeb

KEYSERVER = keyserver.ubuntu.com

GPG = gpg
GPGCONF = gpgconf
export GNUPGHOME = tmp-gnupg

all: $(KEY_PREFIX)-gpg-private.key

$(KEY_PREFIX)-gpg-private.key:
	rm -rf tmp-gnupg
	mkdir -m700 tmp-gnupg
	$(GPG) \
		--batch \
		--passphrase '' \
		--quick-generate-key $(USER_ID) ed25519 sign never
	$(GPG) --list-keys
	$(GPG) \
		--export \
		--armor \
		--comment 'Package signing key for' \
		--comment $(USER_ID) \
		--output $(KEY_PREFIX)-gpg-public.key \
		$(USER_ID)
	$(GPG) --fingerprint $(USER_ID) > $(KEY_PREFIX)-gpg-public.txt
	$(GPG) \
		--export-secret-keys \
		--armor \
		--comment 'Package signing key for' \
		--comment $(USER_ID) \
		--output $@ \
		$(USER_ID)
	$(GPGCONF) --kill all
	mv -f tmp-gnupg/openpgp-revocs.d/*.rev $(KEY_PREFIX)-gpg.rev
	rm -r tmp-gnupg
	@echo
	@echo '         User ID: '$(USER_ID)
	@echo ' Key fingerprint: $(KEY_PREFIX)-gpg-public.txt'
	@echo '  GPG public key: $(KEY_PREFIX)-gpg-public.key'
	@echo ' GPG private key: $@'
	@echo 'Revocation cert.: $(KEY_PREFIX)-gpg.rev'

publish: $(KEY_PREFIX)-gpg-private.key
	mkdir -m700 tmp-gnupg
	$(GPG) --import < $<
	key_id=$$($(GPG) --list-keys --with-colons $(USER_ID) | awk -v FS=: '/^pub/{print $$5}'); \
	$(GPG) --keyserver $(KEYSERVER) --send-keys $$key_id
	$(GPGCONF) --kill all
	rm -r tmp-gnupg

sign-changes: $(KEY_PREFIX)-gpg-private.key
	mkdir -m700 tmp-gnupg
	$(GPG) --import < $<
	debsign -S --no-re-sign *.changes
	$(GPGCONF) --kill all
	rm -r tmp-gnupg

sign-text: $(KEY_PREFIX)-gpg-private.key message.txt
	mkdir -m700 tmp-gnupg
	$(GPG) --import < $<
	$(GPG) --clearsign --local-user $(USER_ID) message.txt
	$(GPGCONF) --kill all
	rm -r tmp-gnupg
	ls -l message.txt.asc

clean:
	shred *.key
	rm -f *.asc *.key *.rev *-gpg-public.txt
	rm -rf tmp-gnupg

# end Makefile.gpg
